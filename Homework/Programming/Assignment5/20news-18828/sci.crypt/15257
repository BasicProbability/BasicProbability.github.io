From betsbicom Bennett Todd  Salomon Brothers Inc NY 
Subject Re Source of random bits on a Unix workstation

For your application what you can do is to encrypt the realtime clock
value with a secret key

Well almost If I only had to solve the problem for myself and were
willing to have to type in a second password the secret key whenever I
logged in it could work However Im trying to create a solution that
anyone can use and which once installed is just as effortless to start up
as the nonsolution of just using xhost1 to control access Ive got
religeous problems with storing secret keys on multiuser computers

For a good discussion of cryptographically good random number
generators check out the draftietfsecurityrandomness00txt
Internet Draft available at your local friendly internet drafts
repository

Thanks for the pointer It was good reading and I liked the idea of using
several unrelated sources with a strong mixing function However unless I
missed something the only source they suggested aside from a hardware RNG
that seems available and unguessable by an intruder when a Unix is
freshbooted is IO buffers related to network traffic I believe my
solution basically uses that strategy without requiring me to reach into
the kernel

A reasonably source of randomness is the output of a cryptographic
hash function eg MD5 when fed with a large amount of
moreorless random data For example running MD5 on devmem is a
slow but random enough source of random bits there are bound to be
128 bits of entropy in the tens or hundreds of megabytes of data in
a modern workstations memory as a fair amount of them are system
timers io buffers etc

I heard about this solution and it sounded good Then I heard that folks
were experiencing times of 3060 seconds to run this on
reasonablyconfigured workstations Im not willing to add that much delay
to someones login process My approach etherfindcompress skip 10K takes
a second or two to run Im considering writing the beall and endall of
solutions that launches the MD5 and simultaneously tries to suck bits off
the net and if the net should be sitting SO idle that it cant get 10K
after compression before MD5 finishes use the MD5 This way I could have
guaranteed good bits and a deterministic upper bound on login time and
still have the common case of login take only a couple of extra seconds

Bennett
betsbicom
