From iopserver2iienckuedutw
Subject Program WMPROTOCOLS in OPEN LOOK toolkit

Hi all
    I am studying the book  UNIX Desktop Guide to OPEN LOOK
There is an example  winpropc that demonstrate how to program
WMPROTOCOLS property in chapter 8  It can run but only show the
static text messages no Notice popup What is the problem
	    Thanks in advance for help1	    IOP

  File  winpropc
 
   Shows how to set properties on a window
 
 
include X11Xatomh	 For definition of XAATOM 
include X11Intrinsich
include X11StringDefsh
include XolOpenLookh
include XolStaticTexth
include XolOblongButth
include XolNoticeh
 This file defines the atoms with OL prefix 
 ID of the toplevel and NoticeShell widget 
static Widget toplevel noticeshell
static Widget makenotice
static char message  Clients use properties to communicate 
with the window manager This example illustrates how an OPEN 
LOOK application requests notification from the window manager 
when certain events occur The communication is in the form of 
a ClientMessage event that the application processes in an 
eventhandler
 Atoms used for interclient communication 
Atom ATOMWMPROTOCOLS ATOMWMDELETEWINDOW
     ATOMWMSAVEYOURSELF
static void handlewmmessages
static void saveandexit
static void saveyourself
static void popnotice
static void doexit
 String to hold comand line for use in responding to
  the WMSAVEYOURSELF protocol message
 
char savedcmdline128

void mainargc argv
int  argc
char argv

    Widget w
    int i
 Save the commandline for use in responding to the
  WMSAVEYOURSELF protocol message
 
    sprintfsavedcmdline s  argv0
    ifargc  1
	fori  1 i  argc i
	
	    strcatsavedcmdline argvi
	    strcatsavedcmdline  
	
 Create and initialize the toplevel widget 
    toplevel  OlInitializeargv0 Olmain NULL
			       0 argc argv
 Create a StaticText widget 
    w  XtVaCreateManagedWidgetStext
		      staticTextWidgetClass toplevel
		      XtNstring    message
		      XtNwidth     200
		      NULL
 Create a NoticeShell widget for later use 
    makenoticetoplevel
 Intern the atoms 
    ATOMWMPROTOCOLS  XInternAtomXtDisplayw
					WMPROTOCOLS False
    ATOMWMDELETEWINDOW  XInternAtomXtDisplayw
				    WMDELETEWINDOW False
    ATOMWMSAVEYOURSELF  XInternAtomXtDisplayw
				    WMSAVEYOURSELF False
 Add an eventhandler to process ClientMessage events sent
  by the window manager
 
    XtAddEventHandlertoplevel NoEventMask True
		      handlewmmessages NULL
 Realize the widgets and start processing events 
    XtRealizeWidgettoplevel
 Append the properties WMDELETEWINDOW and WMSAVEYOURSELF
  to the definition of the WMPROTOCOLS property This step
  requires the window ID of the toplevel widget The window
  ID is valid only after the widget is realized
 
    XChangePropertyXtDisplaytoplevel XtWindowtoplevel
		    ATOMWMPROTOCOLS XAATOM 32
		    PropModeAppend
		    ATOMWMDELETEWINDOW 1
    XChangePropertyXtDisplaytoplevel XtWindowtoplevel
		    ATOMWMPROTOCOLS XAATOM 32
		    PropModeAppend
		    ATOMWMSAVEYOURSELF 1
    XtMainLoop


static void handlewmmessagesw clientdata pevent
Widget	  w
XtPointer clientdata
XEvent	  pevent

    ifpeventtype  ClientMessage 
       peventxclientmessagetype  ATOMWMPROTOCOLS
    
	ifpeventxclientdatal0  ATOMWMDELETEWINDOW
	
		saveandexit
	
	ifpeventxclientdatal0  ATOMWMSAVEYOURSELF
	
		saveyourself
	
    


static void saveandexit

 Display a notice giving the user a chance to respond 
    popnoticetoplevel noticeshell


static void saveyourself

 Set the WMCOMMAND property to the saved commandline 
    XChangePropertyXtDisplaytoplevel XtWindowtoplevel
		    XAWMCOMMAND XASTRING 8
		    PropModeReplace savedcmdline
		    strlensavedcmdline  1


static Widget makenoticeparent
Widget parent

    Widget w ntext ncontrol nexit ncancel
 Create a button and provide a callback to pop up a Notice 
    w  XtVaCreateManagedWidgetQuitButton
		      oblongButtonWidgetClass parent
		      XtNlabel    Exit
		      NULL
    XtAddCallbackw XtNselect popnotice NULL
 Create the NoticeShell widget Note that you have to use
  XtVaCreatePopupShell instead of the usual
  XtVaCreateManagedWidget
 
    noticeshell  XtVaCreatePopupShellQuitNotice
		      noticeShellWidgetClass w
		      NULL
 Get the ID of the text and control area widgets of the
  NoticeShell
 
    XtVaGetValuesnoticeshell
		  XtNtextArea	      ntext
		  XtNcontrolArea     ncontrol
		  NULL
 Place a message in the text area of the NoticeShell 
    XtVaSetValuesntext
	    XtNstring Please confirm exit from program
	    NULL
 Add buttons to the control area of the NoticeShell
  Each button has an appropriate callback
 
    nexit  XtVaCreateManagedWidgetNoticeExit
		      oblongButtonWidgetClass ncontrol
		      XtNlabel    Exit
		      NULL
    XtAddCallbacknexit XtNselect doexit NULL
    ncancel  XtVaCreateManagedWidgetNoticeCancel
		      oblongButtonWidgetClass ncontrol
		      XtNlabel    Cancel
		      XtNdefault  True
		      NULL
    return w


static void popnoticewemanate wnotice
Widget	  wemanate wnotice

    XtVaSetValueswnotice XtNemanateWidget wemanate NULL
 Pop up the NoticeShell widget The NoticeShell widget makes
  sure that the aplication waits until the user selects from
  one of the buttons in the NoticeShells control area
 
    XtPopupwnotice XtGrabExclusive


static void doexitw calldata clientdata
Widget	  w
XtPointer calldata clientdata

    XCloseDisplayXtDisplayw
    exit0

